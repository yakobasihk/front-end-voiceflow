export declare enum RequestType {
    INTENT = "intent",
    TEXT = "text",
    LAUNCH = "launch"
}
export interface BaseRequest<P = unknown> {
    type: string;
    payload: P;
}
export interface VerboseValue {
    rawText: string;
    canonicalText: string;
    startIndex: number;
}
export interface Entity {
    name: string;
    value: string;
    verboseValue?: VerboseValue[];
    query?: string;
}
export interface LaunchRequest extends BaseRequest<undefined> {
    type: RequestType.LAUNCH;
}
export interface TextRequest extends BaseRequest<string> {
    type: RequestType.TEXT;
}
export interface IntentRequestPayload {
    query: string;
    intent: {
        name: string;
    };
    entities: Entity[];
    confidence?: number;
}
export interface IntentRequest extends BaseRequest<IntentRequestPayload> {
    type: RequestType.INTENT;
}
export interface BaseRequestButton<T extends BaseRequest = BaseRequest> {
    name: string;
    request: T;
}
export declare type TextRequestButton = BaseRequestButton<TextRequest>;
export declare type IntentRequestButton = BaseRequestButton<IntentRequest>;
export declare type AnyRequestButton = TextRequestButton | IntentRequestButton;
export declare const isTextRequest: (request: BaseRequest) => request is TextRequest;
export declare const isLaunchRequest: (request: BaseRequest) => request is LaunchRequest;
export declare const isIntentRequest: (request: BaseRequest) => request is IntentRequest;
